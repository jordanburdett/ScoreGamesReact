{"version":3,"sources":["classes/Game.ts","components/GameListItem.tsx","classes/firebase.ts","classes/utils.ts","components/GameList.tsx","components/MyAppBar.tsx","components/HomeScreen.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Game","id","date","name","teams","history","isFavorite","this","Team","score","useStyles","makeStyles","theme","createStyles","arrow","minWidth","GameListItem","game","useState","Date","gameName","setIsFavorite","ListItem","key","button","onClick","event","console","log","ListItemText","primary","secondary","toDateString","ListItemSecondaryAction","edge","checked","onChange","checkedIcon","style","color","icon","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","convertGameList","snapshot","games","forEach","val","convertGame","push","root","database","defaultState","GameList","classes","setGames","rootRef","ref","gamesRef","child","useEffect","once","then","List","component","className","map","index","Divider","teamName","flexGrow","menuButton","marginRight","spacing","title","MyAppBar","AppBar","Toolbar","IconButton","aria-label","Typography","variant","HomeScreen","props","Container","App","darkState","palletType","darkTheme","createMuiTheme","palette","type","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7e68846.chunk.js","sourcesContent":["\n\nexport default class Game {\n  id: number\n  date: number\n  name: string\n  teams: Array<Team>\n  isFavorite: boolean\n  history: Array<{teamName: Array<string>}>\n\n  constructor(id: number, date: number, name: string ,teams: Array<Team>, history: Array<{teamName: Array<string>}>, isFavorite: boolean = false) {\n    this.id = id\n    this.date = date\n    this.name = name\n    this.teams = teams\n    this.isFavorite = isFavorite\n    this.history = history\n  }\n}\n\nexport class Team {\n  name: string\n  score: number\n\n  constructor(name: string, score: number) {\n    this.name = name\n    this.score = score\n  }\n}","import React, { useState } from \"react\";\nimport Game, { Team } from \"../classes/Game\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport StarBorder from \"@material-ui/icons/StarBorder\";\nimport CheckBox from \"@material-ui/core/Checkbox\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\n\ninterface Props {\n  game: Game;\n}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    arrow: {\n      minWidth: \"0\",\n    },\n  });\n});\n\nconst GameListItem = ({ game }: Props) => {\n  const classes = useStyles();\n\n  // state to keep track of\n  const [date, setDate] = useState(new Date(game.date));\n  const [gameName, setGameName] = useState(game.name);\n  const [isFavorite, setIsFavorite] = useState(game.isFavorite);\n\n  const starClicked = () => {\n    setIsFavorite(!isFavorite);\n  };\n\n  return (\n    <ListItem\n      key={game.id}\n      button\n      onClick={(event) => {\n        console.log(\"Play \" + gameName);\n      }}\n    >\n      <ListItemText primary={gameName} secondary={date.toDateString()} />\n\n      <ListItemSecondaryAction>\n        <CheckBox\n          edge=\"end\"\n          checked={isFavorite}\n          onChange={starClicked}\n          checkedIcon={<StarIcon style={{color:\"#FFDF00\"}}/>}\n          icon={<StarBorder />}\n        />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default GameListItem;\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB2aJwBVVsCSVzX_MnSHAbO5gXgn59CeXs\",\n  authDomain: \"scoregames-c0233.firebaseapp.com\",\n  databaseURL: \"https://scoregames-c0233.firebaseio.com\",\n  projectId: \"scoregames-c0233\",\n  storageBucket: \"scoregames-c0233.appspot.com\",\n  messagingSenderId: \"475132375224\",\n  appId: \"1:475132375224:web:206d8be3fc01e8faa6044d\",\n  measurementId: \"G-RQT21T265Y\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase","import Game, { Team } from \"./Game\";\nimport * as firebase from 'firebase';\n\nexport function convertGameList(snapshot: firebase.database.DataSnapshot): Array<Game> {\n  let games: Array<Game> = []\n\n  snapshot.forEach(snapshot => {\n    const game = convertGame(snapshot)\n    games.push(game)\n  });\n\n\n\n  return games\n}\n\nexport function convertGame(snapshot: firebase.database.DataSnapshot): Game {\n  const game = snapshot.val()\n\n  const id = game.id as number || 0;\n  const date = game.date as number || 0;\n  const name = game.name as string || \"\";\n  const teams = game.teams as Array<Team> || null;\n  const isFavorite = game.isFavorite as boolean || false;\n  const history = game.history as Array<{teamName: Array<string>}> || null;\n\n  return new Game(id, date, name, teams, history, isFavorite)\n}\n\n\n","import React, { ReactElement, useState, useEffect } from \"react\";\nimport Game, { Team } from \"../classes/Game\";\nimport GameListItem from \"./GameListItem\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport firebase from \"../classes/firebase\";\nimport { convertGameList } from \"../classes/utils\";\n\ninterface Props {}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    root: {},\n  });\n});\n\nconst database = firebase.database();\nvar defaultState: Array<Game> = []\n\nexport default function GameList(): ReactElement {\n  const classes = useStyles();\n  const [games, setGames] = useState(defaultState);\n\n  // database references\n  const rootRef = database.ref();\n  const usersRef = rootRef.child(\"/Users\");\n  const gamesRef = rootRef.child(\"/games\");\n  const gameCodesRef = rootRef.child(\"/GameCodes\");\n\n  useEffect(() => {\n    // grab the games from firebase\n    gamesRef.once(\"value\").then((snapshot) => {\n      setGames(convertGameList(snapshot))\n    });\n  });\n\n  return (\n    <List component=\"nav\" className={classes.root}>\n      {games.map((game, index) => (\n        <div key={game.id}>\n          {index !== 0 && <Divider />}\n\n          <GameListItem game={game} />\n        </div>\n      ))}\n    </List>\n  );\n}\n\nconst testGame = new Game(\n  1,\n  1600111233421,\n  \"First Game\",\n  [new Team(\"Jordan\", 5000), new Team(\"Amber\", 6000)],\n  [{ teamName: [\"+500\", \"-299\"] }]\n);\n\n// const testGame2 = new Game(2, 1600001233421, \"Test Game\", false, [\n//   new Team(\"basdfdan\", 5000),\n//   new Team(\"Abob\", 6000),\n// ]);\n// const testGame3 = new Game(3, 1600001233421, \"Test Game3\", true, [\n//   new Team(\"basdfdan\", 5000),\n//   new Team(\"Abob\", 6000),\n// ]);\n","import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\n\ninterface Props {\n  title: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nconst MyAppBar = ({ title }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n\n          <Typography variant=\"h6\" className={classes.title}>\n            {title}\n          </Typography>\n\n          <IconButton color=\"inherit\" edge=\"end\">\n            <AccountCircle />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      \n      <Toolbar/>\n    </div>\n  );\n};\n\nexport default MyAppBar;\n","import React from \"react\";\nimport GameList from \"./GameList\";\nimport MyAppBar from \"./MyAppBar\";\nimport Container from \"@material-ui/core/Container\";\n\ninterface Props {}\n\nconst HomeScreen = (props: Props) => {\n  return (\n    <>\n      <MyAppBar title={\"My Games\"}/>\n      <Container>\n        <GameList />\n      </Container>\n      \n    </>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useState } from \"react\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport DarkModeToggle from \"./DarkModeToggle\";\nimport HomeScreen from \"./HomeScreen\";\n\n\n\nfunction App() {\n  const [darkState, setDarkState] = useState(false);\n  const palletType = darkState ? \"dark\" : \"light\";\n  \n  const darkTheme = createMuiTheme({\n    palette: {\n      type: palletType,\n    },\n  });\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <HomeScreen />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}