{"version":3,"sources":["classes/firebase.ts","components/GameListItem.tsx","classes/Game.ts","classes/utils.ts","components/GameList.tsx","components/MyAppBar.tsx","components/HomeScreen.tsx","components/SignIn.tsx","components/SignUp.tsx","components/LoginScreen.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","useStyles","makeStyles","theme","createStyles","arrow","minWidth","GameListItem","game","useState","Date","date","name","gameName","isFavorite","setIsFavorite","useEffect","ref","id","on","snapshot","val","ListItem","key","button","onClick","event","console","log","ListItemText","primary","secondary","toDateString","ListItemSecondaryAction","edge","checked","onChange","value","gameId","update","checkedIcon","style","color","icon","Game","teams","history","teamName","this","convertGame","defaultState","spinner","display","marginLeft","spacing","alignItems","justifyContent","minHeight","GameList","classes","games","setGames","gamesHaveLoaded","setGamesHaveLoaded","rootRef","usersRef","child","auth","currentUser","uid","gamesRef","newGames","a","count","forEach","snap","once","set","newGame","push","numChildren","List","component","map","index","Divider","className","root","flexGrow","menuButton","marginRight","title","MyAppBar","AppBar","Toolbar","IconButton","aria-label","Typography","variant","HomeScreen","props","Container","Copyright","align","getFullYear","paper","marginTop","flexDirection","avatar","margin","backgroundColor","palette","main","form","width","submit","SignIn","toggle","username","setUsername","password","setPassword","rememberMe","setRememberMe","incorrectPassword","setIncorrectPassword","maxWidth","CssBaseline","Avatar","onSubmit","preventDefault","signInWithEmailAndPassword","catch","error","errorCode","code","message","TextField","required","fullWidth","label","autoComplete","target","toLowerCase","autoFocus","type","FormHelperText","FormControlLabel","control","Checkbox","Button","Grid","container","item","xs","Link","href","provider","GoogleAuthProvider","signInWithPopup","then","user","email","credential","Box","mt","SignUp","setEmail","hasError","setHasError","errorMessage","setErrorMessage","createUserWithEmailAndPassword","justify","LoginScreen","isSignUp","setIsSignUp","toggleSignUp","App","darkState","palletType","loggedIn","setLoggedIn","darkTheme","createMuiTheme","onAuthStateChanged","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.704a64db.chunk.js","sourcesContent":["import firebase from 'firebase'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB2aJwBVVsCSVzX_MnSHAbO5gXgn59CeXs\",\n  authDomain: \"scoregames-c0233.firebaseapp.com\",\n  databaseURL: \"https://scoregames-c0233.firebaseio.com\",\n  projectId: \"scoregames-c0233\",\n  storageBucket: \"scoregames-c0233.appspot.com\",\n  messagingSenderId: \"475132375224\",\n  appId: \"1:475132375224:web:206d8be3fc01e8faa6044d\",\n  measurementId: \"G-RQT21T265Y\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst database = firebase.database()\n\nexport default firebase\n\n\n\n\nexport function firebaseUpdateIsFavorite(value: boolean, gameId: string) {\n  database.ref(\"games/\" + gameId).update({\n    isFavorite: value\n  }, () => {\n    console.log(\"Favorite updated\")\n  })\n}","import React, { useState, useEffect } from \"react\";\nimport Game, { Team } from \"../classes/Game\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport StarBorder from \"@material-ui/icons/StarBorder\";\nimport CheckBox from \"@material-ui/core/Checkbox\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport firebase, { firebaseUpdateIsFavorite } from \"../classes/firebase\";\n\ninterface Props {\n  game: Game;\n}\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    arrow: {\n      minWidth: \"0\",\n    },\n  });\n});\n\nconst GameListItem = ({ game }: Props) => {\n  const classes = useStyles();\n\n  // state to keep track of\n  const [date, setDate] = useState(new Date(game.date));\n  const [gameName, setGameName] = useState(game.name);\n  const [isFavorite, setIsFavorite] = useState(game.isFavorite);\n\n  const starClicked = () => {\n    firebaseUpdateIsFavorite(!isFavorite, game.id);\n  };\n\n  useEffect(() => {\n    firebase.database().ref(`games/${game.id}/isFavorite`).on(\"value\", snapshot => {\n      setIsFavorite(snapshot.val())\n    })\n  }, []);\n\n  return (\n    <ListItem\n      key={game.id}\n      button\n      onClick={(event) => {\n        console.log(\"Play \" + gameName);\n      }}\n    >\n      <ListItemText primary={gameName} secondary={date.toDateString()} />\n\n      <ListItemSecondaryAction>\n        <CheckBox\n          edge=\"end\"\n          checked={isFavorite}\n          onChange={starClicked}\n          checkedIcon={<StarIcon style={{ color: \"#FFDF00\" }} />}\n          icon={<StarBorder />}\n        />\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n\nexport default GameListItem;\n","\n\nexport default class Game {\n  id: string\n  date: number\n  name: string\n  teams: Array<Team>\n  isFavorite: boolean\n  history: Array<{teamName: Array<string>}>\n\n  constructor(id: string, date: number, name: string ,teams: Array<Team>, history: Array<{teamName: Array<string>}> = [{teamName: [\"billy\"]}], isFavorite: boolean = false) {\n    this.id = id\n    this.date = date\n    this.name = name\n    this.teams = teams\n    this.isFavorite = isFavorite\n    this.history = history\n  }\n}\n\nexport class Team {\n  name: string\n  score: number\n\n  constructor(name: string, score: number) {\n    this.name = name\n    this.score = score\n  }\n}","import Game, { Team } from \"./Game\";\nimport * as firebase from 'firebase';\n\nexport function convertGameList(snapshot: firebase.database.DataSnapshot): Array<Game> {\n  let games: Array<Game> = []\n\n  snapshot.forEach(snapshot => {\n    const game = convertGame(snapshot)\n    games.push(game)\n  });\n\n\n\n  return games\n}\n\nexport function convertGame(snapshot: firebase.database.DataSnapshot): Game {\n  const game = snapshot.val()\n  const id = game.id as string || \"\";\n\n  \n  const date = game.date as number || 0;\n  const name = game.name as string || \"\";\n  const teams = game.teams as Array<Team> || null;\n  const isFavorite = game.isFavorite as boolean || false;\n  const history = game.history as Array<{teamName: Array<string>}> || null;\n\n  return new Game(id, date, name, teams, history, isFavorite)\n}\n\n\n","import React, { ReactElement, useState, useEffect } from \"react\";\nimport Game, { Team } from \"../classes/Game\";\nimport GameListItem from \"./GameListItem\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport firebase from \"../classes/firebase\";\nimport { convertGame } from \"../classes/utils\";\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\n\n// const mockData1 = new Game(\"asdfasdf1\", 2342314234, \"Name 1\", [\n//   new Team(\"bob\", 500),\n// ]);\n// const mockData2 = new Game(\"asdfasdf2\", 2342314234, \"Name 1\", [\n//   new Team(\"bob\", 500),\n// ]);\n// const mockData3 = new Game(\"asdfasdf3\", 2342314234, \"Name 1\", [\n//   new Team(\"bob\", 500),\n// ]);\n// const mockData4 = new Game(\"asdfasdf4\", 2342314234, \"Name 1\", [\n//   new Team(\"bob\", 500),\n// ]);\n// const mockData5 = new Game(\"asdfasdf5\", 2342314234, \"Name 1\", [\n//   new Team(\"bob\", 500),\n// ]);\n\ninterface Props {}\n\nconst database = firebase.database();\nvar defaultState: Array<Game> = [\n  // mockData1,\n  // mockData2,\n  // mockData3,\n  // mockData4,\n  // mockData5,\n];\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    spinner: {\n      display: 'flex',\n      '& > * + *': {\n        marginLeft: theme.spacing(2),\n      },\n      alignItems: 'center',\n      justifyContent: 'center',\n      minHeight: '200px',\n    },\n  }),\n);\n\nexport default function GameList(): ReactElement {\n  const classes = useStyles();\n  const [games, setGames] = useState(defaultState);\n  const [gamesHaveLoaded, setGamesHaveLoaded] = useState(false);\n\n  // database references\n  const rootRef = database.ref();\n  const usersRef = rootRef.child(\"/Users/\" + firebase.auth().currentUser?.uid);\n  const gamesRef = rootRef.child(\"/games\");\n  //const gameCodesRef = rootRef.child(\"/GameCodes\");\n\n  // When the component first loads run this\n  useEffect(() => {\n    const newGames: Array<Game> = [];\n\n    // Fetch all of the games from firebase\n    usersRef.child(\"/games\").on(\"value\", async (snapshot) => {\n      var count = 0;\n\n      snapshot.forEach((snap) => {\n        gamesRef.child(\"/\" + snap.key).once(\"value\", (game) => {\n          if (game.val() == null) {\n            // Game Id not found lets clean up the database a little and delete the ones that the game does not exist on.\n            console.log(snapshot.key);\n            usersRef.child(\"/games/\" + snapshot.key).set(null);\n          } else {\n            //game.val() contains a single game.\n            const newGame = convertGame(game);\n            newGames.push(newGame);\n            count = count + 1;\n            if (count === snapshot.numChildren()) {\n              setGames(newGames);\n              setGamesHaveLoaded(true);\n            }\n          }\n        });\n      });\n    });\n  }, []);\n\n  return (\n    <>\n      {gamesHaveLoaded ? (\n        <List component=\"nav\">\n          {games.map((game, index) => (\n            <div key={game.id}>\n              {index !== 0 && <Divider />}\n              <GameListItem game={game} />\n            </div>\n          ))}\n        </List>\n      ) : (\n        <div className={classes.spinner}>\n\n          <CircularProgress />\n        </div>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\n\ninterface Props {\n  title: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nconst MyAppBar = ({ title }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n\n          <Typography variant=\"h6\" className={classes.title}>\n            {title}\n          </Typography>\n\n          <IconButton color=\"inherit\" edge=\"end\">\n            <AccountCircle />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      \n      <Toolbar/>\n    </div>\n  );\n};\n\nexport default MyAppBar;\n","import React from \"react\";\nimport GameList from \"./GameList\";\nimport MyAppBar from \"./MyAppBar\";\nimport Container from \"@material-ui/core/Container\";\n\ninterface Props {}\n\nconst HomeScreen = (props: Props) => {\n  return (\n    <>\n      <MyAppBar title={\"My Games\"}/>\n      <Container>\n        <GameList />\n      </Container>\n      \n    </>\n  );\n};\n\nexport default HomeScreen;\n","import React, { FormEvent, useEffect, useState } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport firebase from \"../classes/firebase\";\nimport { FormHelperText } from \"@material-ui/core\";\nimport GoogleButton from 'react-google-button'\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"© Copyright \"}\n      {new Date().getFullYear()}\n      {\" | Jordan Burdett\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(2),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\ninterface Props {\n  toggle: Function;\n}\n\nexport default function SignIn({ toggle }: Props) {\n  const classes = useStyles();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rememberMe, setRememberMe] = useState(false);\n  const [incorrectPassword, setIncorrectPassword] = useState(false);\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n\n    firebase\n      .auth()\n      .signInWithEmailAndPassword(username, password)\n      .catch((error) => {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n\n        if (errorCode === \"auth/wrong-password\") {\n          setIncorrectPassword(true);\n        }\n        console.log(error);\n      });\n  };\n\n  const signInWithGoogle = () => {\n    let provider = new firebase.auth.GoogleAuthProvider();\n\n    firebase.auth().signInWithPopup(provider).then( user => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      console.log(user)\n      // ...\n    }).catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n    });\n  }\n\n  const onUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUsername(event.target.value.toLowerCase());\n  };\n\n  const onPasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(event.target.value);\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} onSubmit={onSubmit}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            value={username}\n            onChange={onUsernameChange}\n            autoFocus\n          />\n\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={onPasswordChange}\n            autoComplete=\"current-password\"\n          />\n\n          {incorrectPassword && (\n            <FormHelperText error={true}>* Incorrect Password</FormHelperText>\n          )}\n\n          <FormControlLabel\n            control={\n              <Checkbox\n                value=\"remember\"\n                checked={rememberMe}\n                color=\"primary\"\n                onChange={() => setRememberMe(!rememberMe)}\n              />\n            }\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item xs>\n              <Link href=\"#\" variant=\"body2\">\n                Forgot password?\n              </Link>\n            </Grid>\n            <Grid item>\n              <Link onClick={() => toggle()} variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n          <Grid container>\n            <Grid item xs={12}>\n              <GoogleButton onClick={signInWithGoogle} style={{marginTop: \"50px\"}}/>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","import React, { useState, FormEvent } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport firebase from \"../classes/firebase\";\nimport { FormHelperText } from \"@material-ui/core\";\nimport GoogleButton from \"react-google-button\"\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {\"© Copyright \"}\n      {new Date().getFullYear()}\n      {\" | Jordan Burdett\"}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\ninterface Props {\n  toggle: Function;\n}\n\nexport default function SignUp({ toggle }: Props) {\n  const classes = useStyles();\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastname, setLastname] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rememberMe, setRememberMe] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const onFirstNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(event.target.value);\n  };\n\n  const onLastNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setLastname(event.target.value);\n  };\n  const onEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value.toLowerCase());\n  };\n\n  const onPasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(event.target.value);\n  };\n\n  const signInWithGoogle = () => {\n    let provider = new firebase.auth.GoogleAuthProvider();\n\n    firebase.auth().signInWithPopup(provider).then( user => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      console.log(user)\n      // ...\n    }).catch(function(error) {\n      // Handle Errors here.\n      var errorCode = error.code;\n      var errorMessage = error.message;\n      // The email of the user's account used.\n      var email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      var credential = error.credential;\n      // ...\n    });\n  }\n\n  const onSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    // If I wanted to do a check to ensure that we have a strong password or something do it here\n    firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .catch((error) => {\n        setErrorMessage(error.message);\n        setHasError(true);\n      });\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form} onSubmit={onSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={email}\n                onChange={onEmailChange}\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value={password}\n                onChange={onPasswordChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    value=\"keepMeSignedIn\"\n                    color=\"primary\"\n                    checked={rememberMe}\n                    onChange={() => setRememberMe(!rememberMe)}\n                  />\n                }\n                label=\"Always remember me on this device?\"\n              />\n\n              {hasError && (\n                <FormHelperText error={true}>\n                  * {errorMessage}\n                </FormHelperText>\n              )}\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link onClick={() => toggle()} variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n\n          <Grid container>\n            <Grid item xs={12}>\n              <GoogleButton onClick={signInWithGoogle} style={{marginTop: \"50px\"}}/>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}\n","import React, { useState } from \"react\";\nimport SignIn from \"./SignIn\";\nimport SignUp from \"./SignUp\";\nimport Container from \"@material-ui/core/Container\";\nimport Typography from \"@material-ui/core/Typography\";\n\ninterface Props {}\n\nconst LoginScreen = (props: Props) => {\n  const [isSignUp, setIsSignUp] = useState(false);\n\n  const toggleSignUp = () => {\n    setIsSignUp(!isSignUp);\n  };\n\n  return (\n    <>\n      <Container>\n        <Typography align=\"center\" variant=\"h3\" style={{marginTop: \"50px\"}}>\n          Score Games\n        </Typography>\n      </Container>\n      {isSignUp ? (\n        <SignUp toggle={toggleSignUp} />\n      ) : (\n        <SignIn toggle={toggleSignUp} />\n      )}\n    </>\n  );\n};\n\nexport default LoginScreen;\n","import React, { useState, useEffect } from \"react\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport DarkModeToggle from \"./DarkModeToggle\";\nimport HomeScreen from \"./HomeScreen\";\nimport LoginScreen from \"./LoginScreen\";\nimport firebase from \"firebase\";\n\nfunction App() {\n  const [darkState, setDarkState] = useState(false);\n  const palletType = darkState ? \"dark\" : \"light\";\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const darkTheme = createMuiTheme({\n    palette: {\n      type: palletType,\n    },\n  });\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        setLoggedIn(true);\n      } else {\n        setLoggedIn(false);\n      }\n    });\n  }, []);\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      {loggedIn ? <HomeScreen /> : <LoginScreen />}\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}