{"ast":null,"code":"import _classCallCheck from \"/Users/jordan/Projects/ScoreGames/score-games/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jordan/Projects/ScoreGames/score-games/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar Game = /*#__PURE__*/function () {\n  function Game() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    var teams = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, Game);\n\n    this.name = name;\n    this.teams = teams;\n  }\n\n  _createClass(Game, [{\n    key: \"getTeamNames\",\n    value: function getTeamNames() {\n      var teamNames = [];\n\n      var _iterator = _createForOfIteratorHelper(this.teams),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var team = _step.value;\n          teamNames.push(team.name);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return teamNames;\n    }\n  }]);\n\n  return Game;\n}();\n\nexport { Game as default };\nexport var Player = function Player(name, id) {\n  _classCallCheck(this, Player);\n\n  this.name = name;\n  this.id = id;\n};\nexport var Team = function Team() {\n  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"team!:)\";\n  var score = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var history = arguments.length > 2 ? arguments[2] : undefined;\n\n  _classCallCheck(this, Team);\n\n  this.name = name;\n  this.score = score;\n  this.history = history;\n};\nexport function transformFromFirebase(jsonGame) {\n  return new Game(jsonGame.name, jsonGame.teams);\n}","map":{"version":3,"sources":["/Users/jordan/Projects/ScoreGames/score-games/features/models/game.tsx"],"names":["Game","name","teams","teamNames","team","push","Player","id","Team","score","history","transformFromFirebase","jsonGame"],"mappings":";;;;;;;;;IAAqBA,I;AACjB,kBAAiE;AAAA,QAA9CC,IAA8C,uEAA/B,EAA+B;AAAA,QAApBC,KAAoB;;AAAA;;AAAA,SAA9CD,IAA8C,GAA9CA,IAA8C;AAAA,SAApBC,KAAoB,GAApBA,KAAoB;AAAE;;;;mCAEpD;AACX,UAAMC,SAAS,GAAG,EAAlB;;AADW,iDAEM,KAAKD,KAFX;AAAA;;AAAA;AAEX,4DAA6B;AAAA,cAApBE,IAAoB;AACzBD,UAAAA,SAAS,CAACE,IAAV,CAAeD,IAAI,CAACH,IAApB;AACH;AAJU;AAAA;AAAA;AAAA;AAAA;;AAMX,aAAOE,SAAP;AACH;;;;;;SAVgBH,I;AAarB,WAAaM,MAAb,GACI,gBAAmBL,IAAnB,EAAwCM,EAAxC,EAAoD;AAAA;;AAAA,OAAjCN,IAAiC,GAAjCA,IAAiC;AAAA,OAAZM,EAAY,GAAZA,EAAY;AAAE,CAD1D;AAIA,WAAaC,IAAb,GACI,gBAAsF;AAAA,MAAnEP,IAAmE,uEAA5D,SAA4D;AAAA,MAA1CQ,KAA0C,uEAAlC,CAAkC;AAAA,MAAxBC,OAAwB;;AAAA;;AAAA,OAAnET,IAAmE,GAAnEA,IAAmE;AAAA,OAA1CQ,KAA0C,GAA1CA,KAA0C;AAAA,OAAxBC,OAAwB,GAAxBA,OAAwB;AAAE,CAD5F;AAIA,OAAO,SAASC,qBAAT,CAA+BC,QAA/B,EAA8C;AACjD,SAAO,IAAIZ,IAAJ,CAASY,QAAQ,CAACX,IAAlB,EAAwBW,QAAQ,CAACV,KAAjC,CAAP;AACH","sourcesContent":["export default class Game {\n    constructor(public name: string = \"\", public teams: Array<Team>) {}\n\n    getTeamNames() {\n        const teamNames = [];\n        for (let team of this.teams) {\n            teamNames.push(team.name);\n        }\n\n        return teamNames;\n    }\n}\n\nexport class Player {\n    constructor(public name: string, public id: string) {}\n}\n\nexport class Team {\n    constructor(public name = \"team!:)\", public score = 0, public history: Array<Number>) {}\n}\n\nexport function transformFromFirebase(jsonGame: any) {\n    return new Game(jsonGame.name, jsonGame.teams);\n}"]},"metadata":{},"sourceType":"module"}